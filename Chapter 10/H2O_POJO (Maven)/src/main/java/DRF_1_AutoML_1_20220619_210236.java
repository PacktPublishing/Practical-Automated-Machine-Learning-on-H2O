/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2022-06-19T21:08:54.086+01:00
  3.36.1.2
  
  Standalone prediction code with sample test data for DRFModel named DRF_1_AutoML_1_20220619_210236

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.115:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.115:54321/3/Models.java/DRF_1_AutoML_1_20220619_210236 > DRF_1_AutoML_1_20220619_210236.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DRF_1_AutoML_1_20220619_210236.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DRF_1_AutoML_1_20220619_210236", algorithm="drf")
public class DRF_1_AutoML_1_20220619_210236 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DRF_1_AutoML_1_20220619_210236.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ DRF_1_AutoML_1_20220619_210236_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.33587786259541985,0.31297709923664124,0.3511450381679389};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.33587786259541985,0.31297709923664124,0.3511450381679389};

  public DRF_1_AutoML_1_20220619_210236() { super(NAMES,DOMAINS,"C5"); }
  public String getUUID() { return Long.toString(1540645901650961226L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    DRF_1_AutoML_1_20220619_210236_Forest_0.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_1.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_2.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_3.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_4.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_5.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_6.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_7.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_8.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_9.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_10.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_11.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_12.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_13.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_14.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_15.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_16.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_17.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_18.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_19.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_20.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_21.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_22.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_23.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_24.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_25.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_26.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_27.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_28.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_29.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_30.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_31.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_32.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_33.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_34.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_35.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_36.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_37.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_38.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_39.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_40.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_41.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_42.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_43.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_44.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_45.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_46.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_47.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_48.score0(data,preds);
    DRF_1_AutoML_1_20220619_210236_Forest_49.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_DRF_1_AutoML_1_20220619_210236 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_DRF_1_AutoML_1_20220619_210236_0.fill(VALUES);
  }
  static final class NamesHolder_DRF_1_AutoML_1_20220619_210236_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C1";
      sa[1] = "C2";
      sa[2] = "C3";
      sa[3] = "C4";
    }
  }
}
// The class representing column C5
class DRF_1_AutoML_1_20220619_210236_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    DRF_1_AutoML_1_20220619_210236_ColInfo_4_0.fill(VALUES);
  }
  static final class DRF_1_AutoML_1_20220619_210236_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Iris-setosa";
      sa[1] = "Iris-versicolor";
      sa[2] = "Iris-virginica";
    }
  }
}

class DRF_1_AutoML_1_20220619_210236_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_0_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_0_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_0_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (data[1 /* C2 */] < 2.7996094f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.0f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.8992188f ? 
             (data[3 /* C4 */] < 0.653125f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.651953f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6515625f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9410157f ? 
                     (data[0 /* C1 */] < 4.7609377f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (data[0 /* C1 */] < 5.351172f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0447264f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.5507812f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.744357f ? 
                        1.0f : 
                         (data[3 /* C4 */] < 1.725f ? 
                            1.0f : 
                             (data[0 /* C1 */] < 5.96f ? 
                                1.0f : 
                                0.0f))) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.549048f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8027344f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.7487874f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                 (data[0 /* C1 */] < 6.350059f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.003125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_1_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_1_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_1_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7001724f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3503907f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.8488283f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_2_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_2_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_2_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5492829f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.240625f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* C1 */] < 5.453125f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.65f ? 
                         (data[1 /* C2 */] < 2.853125f ? 
                            1.0f : 
                             (data[1 /* C2 */] < 3.194922f ? 
                                0.0f : 
                                1.0f)) : 
                        1.0f))) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (data[1 /* C2 */] < 2.9972656f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5501953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.2521486f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.4480467f ? 
                 (data[1 /* C2 */] < 2.596875f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[3 /* C4 */] < 1.8503418f ? 
             (data[0 /* C1 */] < 6.0507812f ? 
                 (data[2 /* C3 */] < 4.9410157f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_3_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_3_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_3_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
             (data[1 /* C2 */] < 2.553125f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.2484374f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5503709f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5015625f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.500781f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.049609f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.75f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[0 /* C1 */] < 6.798636f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_4_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_4_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_4_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[0 /* C1 */] < 6.251172f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                 (data[1 /* C2 */] < 2.25625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (data[2 /* C3 */] < 4.945292f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.801614f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.6f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.2453895f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[3 /* C4 */] < 1.6492188f ? 
             (data[1 /* C2 */] < 2.3523438f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_5_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_5_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_5_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[3 /* C4 */] < 1.5011718f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.453125f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* C1 */] < 6.04375f ? 
                     (data[2 /* C3 */] < 4.9039063f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[2 /* C3 */] < 5.3511214f ? 
                0.0f : 
                1.0f) : 
             (data[0 /* C1 */] < 6.0507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0992188f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_6_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_6_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_6_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
             (data[1 /* C2 */] < 2.553125f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.4977264f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* C3 */] < 4.9481616f ? 
                 (data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 5.959375f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* C1 */] < 6.0578127f ? 
                     (data[1 /* C2 */] < 2.6f ? 
                        0.0f : 
                         (data[3 /* C4 */] < 1.7565918f ? 
                            1.0f : 
                            0.0f)) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.446875f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[2 /* C3 */] < 4.95026f ? 
             (data[3 /* C4 */] < 1.6515625f ? 
                0.0f : 
                 (data[0 /* C1 */] < 5.9515624f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[3 /* C4 */] < 1.5492188f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.85f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_7_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_7_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_7_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                 (data[1 /* C2 */] < 2.55625f ? 
                     (data[0 /* C1 */] < 4.953906f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* C3 */] < 4.8497286f ? 
                 (data[1 /* C2 */] < 3.1f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* C3 */] < 5.051f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.5023437f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                     (data[3 /* C4 */] < 1.65625f ? 
                         (data[1 /* C2 */] < 2.3625f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_8_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_8_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_8_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[0 /* C1 */] < 6.2125f ? 
                    0.0f : 
                    1.0f) : 
                 (data[2 /* C3 */] < 4.851953f ? 
                     (data[0 /* C1 */] < 5.959375f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.4023438f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* C1 */] < 5.948828f ? 
             (data[2 /* C3 */] < 4.8488283f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_9_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_9_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_9_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.3021483f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* C3 */] < 2.6478515f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8027344f ? 
             (data[0 /* C1 */] < 4.946875f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.651172f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[2 /* C3 */] < 2.9013672f ? 
            0.0f : 
             (data[0 /* C1 */] < 6.2054687f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.69375f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* C3 */] < 5.0529366f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6453125f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.8027344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.7487874f ? 
                 (data[3 /* C4 */] < 1.75f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_10_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_10_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_10_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.8488283f ? 
             (data[0 /* C1 */] < 4.946875f ? 
                0.0f : 
                1.0f) : 
             (data[1 /* C2 */] < 2.5515625f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                     (data[1 /* C2 */] < 2.35f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (data[1 /* C2 */] < 2.5515625f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.458472f ? 
                    0.0f : 
                     (data[2 /* C3 */] < 4.6999326f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
            1.0f) : 
         (data[0 /* C1 */] < 6.1f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_11_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_11_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_11_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                 (data[1 /* C2 */] < 2.85f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* C3 */] < 5.048488f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.903125f ? 
                     (data[3 /* C4 */] < 1.65625f ? 
                         (data[2 /* C3 */] < 4.95f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[2 /* C3 */] < 5.0489016f ? 
                 (data[1 /* C2 */] < 2.35625f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* C3 */] < 4.847421f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_12_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_12_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_12_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.6487312f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.4498038f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.987109f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.753125f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.101953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.998633f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.64375f ? 
                    0.0f : 
                    1.0f) : 
                 (data[3 /* C4 */] < 1.55f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
        0.97619045f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_13_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_13_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_13_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[3 /* C4 */] < 1.75f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.2007813f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6375f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                 (data[0 /* C1 */] < 5.9515624f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.090625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.2054687f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6453125f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (data[0 /* C1 */] < 5.9453125f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_14_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_14_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_14_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[0 /* C1 */] < 6.1527343f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0484376f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.7125f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[2 /* C3 */] < 4.7541647f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[3 /* C4 */] < 1.6984375f ? 
             (data[0 /* C1 */] < 6.0492187f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_15_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_15_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_15_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
                 (data[0 /* C1 */] < 5.005469f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.903125f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.500781f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_16_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_16_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_16_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.499219f ? 
                    0.0f : 
                     (data[2 /* C3 */] < 5.4f ? 
                        1.0f : 
                        0.0f))) : 
             (data[2 /* C3 */] < 4.8497286f ? 
                 (data[0 /* C1 */] < 6.04375f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* C3 */] < 5.051f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.9f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.4984374f ? 
                     (data[0 /* C1 */] < 5.9514284f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_17_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_17_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_17_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.3482423f ? 
            1.0f : 
            0.0f) : 
         (data[3 /* C4 */] < 0.7f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (data[2 /* C3 */] < 4.952539f ? 
             (data[3 /* C4 */] < 0.6039063f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6996094f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5498047f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.0f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.5507812f ? 
                1.0f : 
                 (data[2 /* C3 */] < 4.9507813f ? 
                     (data[1 /* C2 */] < 3.0964844f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.8519531f ? 
                 (data[3 /* C4 */] < 1.5500625f ? 
                    1.0f : 
                     (data[3 /* C4 */] < 1.698463f ? 
                        0.0f : 
                         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.075f ? 
                            1.0f : 
                            0.0f))) : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.952539f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_18_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_18_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_18_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.0479903f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.4976563f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                         (data[2 /* C3 */] < 4.946875f ? 
                             (data[3 /* C4 */] < 1.66f ? 
                                1.0f : 
                                0.0f) : 
                            0.0f) : 
                        1.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[2 /* C3 */] < 5.051f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.500781f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                     (data[2 /* C3 */] < 4.9484377f ? 
                         (data[3 /* C4 */] < 1.6375f ? 
                            0.0f : 
                            1.0f) : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_19_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_19_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_19_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.0578127f ? 
                     (data[1 /* C2 */] < 2.4578125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[2 /* C3 */] < 4.8497286f ? 
                 (data[1 /* C2 */] < 2.9976563f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[2 /* C3 */] < 4.84952f ? 
             (data[1 /* C2 */] < 3.0f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* C1 */] < 6.0507812f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.950412f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.45f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_20_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_20_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_20_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.749821f ? 
             (data[1 /* C2 */] < 2.6f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.447656f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.746875f ? 
                 (data[3 /* C4 */] < 1.75f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5503906f ? 
                         (data[1 /* C2 */] < 2.55625f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5984375f ? 
             (data[0 /* C1 */] < 4.946875f ? 
                 (data[3 /* C4 */] < 1.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f) : 
         (data[2 /* C3 */] < 5.2000117f ? 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[3 /* C4 */] < 1.5507812f ? 
                     (data[1 /* C2 */] < 2.6523438f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_21_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_21_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_21_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.85f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* C3 */] < 2.5959961f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                 (data[3 /* C4 */] < 0.6539062f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5453125f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 3.005078f ? 
            0.0f : 
             (data[2 /* C3 */] < 4.949987f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6453125f ? 
                    1.0f : 
                    0.0f)) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (data[0 /* C1 */] < 5.4f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.998633f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_22_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_22_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_22_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
            1.0f : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503631f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.75f ? 
                         (data[1 /* C2 */] < 2.3546875f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.5501953f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.649675f ? 
                     (data[1 /* C2 */] < 2.85f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
        0.97619045f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_23_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_23_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_23_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3499695f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.0578127f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0234804f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.6492188f ? 
             (data[0 /* C1 */] < 6.2054687f ? 
                1.0f : 
                 (data[2 /* C3 */] < 4.9943337f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_24_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_24_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_24_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0447264f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5507476f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (data[1 /* C2 */] < 2.996875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0507812f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0447264f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.8488283f ? 
             (data[1 /* C2 */] < 2.996875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_25_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_25_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_25_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (data[2 /* C3 */] < 5.0478153f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0504885f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
                0.0f : 
                 (data[2 /* C3 */] < 4.7498665f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
        0.97619045f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_26_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_26_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_26_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.7f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.45f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.496875f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
             (data[0 /* C1 */] < 4.75f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3488281f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1953125f ? 
                         (data[2 /* C3 */] < 4.871875f ? 
                            1.0f : 
                             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.55f ? 
                                0.0f : 
                                1.0f)) : 
                        1.0f))) : 
            0.0f) : 
         (data[0 /* C1 */] < 5.548047f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[2 /* C3 */] < 2.9128907f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.2361116f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* C1 */] < 5.9431324f ? 
                     (data[2 /* C3 */] < 4.963281f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
             (data[1 /* C2 */] < 2.2507813f ? 
                 (data[2 /* C3 */] < 4.503125f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.3328123f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.7487874f ? 
             (data[3 /* C4 */] < 1.6515625f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_27_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_27_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_27_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.1497602f ? 
                 (data[3 /* C4 */] < 1.75f ? 
                     (data[1 /* C2 */] < 2.746875f ? 
                        1.0f : 
                         (data[3 /* C4 */] < 1.6015625f ? 
                            0.0f : 
                            1.0f)) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[1 /* C2 */] < 2.746875f ? 
                    0.0f : 
                     (data[3 /* C4 */] < 1.6015625f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_28_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_28_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_28_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[2 /* C3 */] < 4.846411f ? 
                 (data[0 /* C1 */] < 5.9453125f ? 
                    1.0f : 
                    0.0f) : 
                 (data[3 /* C4 */] < 1.703125f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.65f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[2 /* C3 */] < 4.84952f ? 
             (data[0 /* C1 */] < 5.9453125f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.65f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_29_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_29_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_29_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.7f ? 
            1.0f : 
            0.0f) : 
         (data[3 /* C4 */] < 0.6015625f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (data[3 /* C4 */] < 0.65005034f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3970764f ? 
                    1.0f : 
                    0.5f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.7984375f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.7489197f ? 
                1.0f : 
                 (data[3 /* C4 */] < 1.898549f ? 
                     (data[0 /* C1 */] < 5.959375f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                1.0f : 
                0.0f)) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.349108f ? 
                 (data[3 /* C4 */] < 1.4015625f ? 
                    0.0f : 
                     (data[1 /* C2 */] < 2.6515625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_30_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_30_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_30_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
                1.0f : 
                 (data[3 /* C4 */] < 1.5507812f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[3 /* C4 */] < 1.5507812f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_31_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_31_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_31_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.3482423f ? 
            1.0f : 
            0.0f) : 
        0.046511628f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (data[2 /* C3 */] < 2.1559796f ? 
                0.0f : 
                 (data[0 /* C1 */] < 5.0f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5492188f ? 
                     (data[2 /* C3 */] < 4.9546876f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)) : 
         (data[0 /* C1 */] < 5.351172f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6515625f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.4992187f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* C1 */] < 6.1476808f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.350937f ? 
                0.0f : 
                 (data[1 /* C2 */] < 2.7007813f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.8996096f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5484375f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.7487874f ? 
             (data[3 /* C4 */] < 1.6515625f ? 
                 (data[1 /* C2 */] < 2.85f ? 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.3992186f ? 
                         (data[1 /* C2 */] < 2.65f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_32_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_32_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_32_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.7499542f ? 
             (data[1 /* C2 */] < 2.6492188f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.240625f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[0 /* C1 */] < 5.953125f ? 
                 (data[2 /* C3 */] < 4.8488283f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0507812f ? 
            0.0f : 
             (data[1 /* C2 */] < 2.7f ? 
                 (data[0 /* C1 */] < 6.2007813f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* C1 */] < 5.948828f ? 
             (data[2 /* C3 */] < 4.8488283f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_33_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_33_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_33_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.4519532f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* C3 */] < 2.4000976f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (data[0 /* C1 */] < 4.9960938f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[3 /* C4 */] < 1.5503845f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[2 /* C3 */] < 3.0511718f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.5484375f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.351564f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.750879f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_34_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_34_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_34_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.901854f ? 
            1.0f : 
             (data[0 /* C1 */] < 6.599219f ? 
                0.0f : 
                 (data[2 /* C3 */] < 5.1047907f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[1 /* C2 */] < 2.95f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.0489016f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_35_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_35_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_35_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.651953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.7541647f ? 
                 (data[0 /* C1 */] < 4.9547486f ? 
                    0.0f : 
                    1.0f) : 
                 (data[3 /* C4 */] < 1.69375f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.753125f ? 
                         (data[2 /* C3 */] < 5.05f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.4501557f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[1 /* C2 */] < 2.7488282f ? 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[1 /* C2 */] < 2.45f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_36_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_36_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_36_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.7515626f ? 
                 (data[3 /* C4 */] < 1.853125f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.499658f ? 
                             (data[1 /* C2 */] < 2.5375f ? 
                                 (data[1 /* C2 */] < 2.351875f ? 
                                    0.0f : 
                                    1.0f) : 
                                0.0f) : 
                            1.0f) : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
            0.0f : 
             (data[1 /* C2 */] < 2.6492188f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* C3 */] < 5.051f ? 
             (data[3 /* C4 */] < 1.7501953f ? 
                 (data[1 /* C2 */] < 2.3523438f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* C3 */] < 4.8500037f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0984375f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_37_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_37_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_37_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.0489016f ? 
                 (data[0 /* C1 */] < 6.25f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7964172f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[3 /* C4 */] < 1.7034912f ? 
                     (data[1 /* C2 */] < 2.7570312f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0504885f ? 
            0.0f : 
             (data[0 /* C1 */] < 6.1492186f ? 
                0.0f : 
                1.0f)) : 
        0.97619045f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_38_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_38_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_38_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (data[1 /* C2 */] < 2.7996094f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.0515625f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.45f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 3.9039063f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.251172f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3515625f ? 
                 (data[0 /* C1 */] < 4.9554687f ? 
                    0.0f : 
                    1.0f) : 
                 (data[1 /* C2 */] < 2.651172f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6986206f ? 
                        1.0f : 
                        0.0f))) : 
             (data[1 /* C2 */] < 2.5992188f ? 
                 (data[3 /* C4 */] < 1.646875f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.548047f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 3.2009766f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.0509424f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.033203f ? 
                     (data[2 /* C3 */] < 2.9069734f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (data[1 /* C2 */] < 2.7488282f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3515625f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6502106f ? 
                    1.0f : 
                     (data[2 /* C3 */] < 4.503125f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.894922f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.049401f ? 
             (data[2 /* C3 */] < 5.0447264f ? 
                 (data[1 /* C2 */] < 2.7988281f ? 
                     (data[3 /* C4 */] < 1.65625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_39_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_39_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_39_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (data[0 /* C1 */] < 4.9960938f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.096692f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.4484375f ? 
                        1.0f : 
                         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.071875f ? 
                            1.0f : 
                             (data[3 /* C4 */] < 1.55f ? 
                                0.0f : 
                                1.0f))) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0504885f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                 (data[2 /* C3 */] < 4.7498665f ? 
                    1.0f : 
                    0.0f)) : 
             (data[1 /* C2 */] < 2.746875f ? 
                0.0f : 
                1.0f)) : 
        0.97619045f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_40_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_40_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_40_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[3 /* C4 */] < 1.5503906f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9484377f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[3 /* C4 */] < 1.8496094f ? 
                     (data[0 /* C1 */] < 5.9515624f ? 
                         (data[1 /* C2 */] < 3.109375f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[3 /* C4 */] < 1.5503906f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9578123f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.8510742f ? 
                 (data[0 /* C1 */] < 5.9453125f ? 
                     (data[1 /* C2 */] < 3.0992188f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_41_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_41_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_41_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 3.2009766f ? 
            1.0f : 
            0.0f) : 
         (data[3 /* C4 */] < 0.6507813f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.95f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (data[0 /* C1 */] < 5.2f ? 
                0.0f : 
                1.0f) : 
             (data[2 /* C3 */] < 4.9481616f ? 
                 (data[3 /* C4 */] < 1.646875f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.85f ? 
            0.0f : 
             (data[2 /* C3 */] < 5.0447264f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.345173f ? 
                0.0f : 
                 (data[0 /* C1 */] < 5.249219f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0447264f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_42_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_42_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_42_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[0 /* C1 */] < 6.1527343f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8497286f ? 
                 (data[0 /* C1 */] < 5.0027633f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (data[2 /* C3 */] < 4.7541647f ? 
                1.0f : 
                 (data[1 /* C2 */] < 2.6046875f ? 
                    0.5f : 
                     (data[2 /* C3 */] < 5.0582013f ? 
                         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9492726f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5496094f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.1492186f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* C1 */] < 6.0507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0992188f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_43_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_43_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_43_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7001724f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.057031f ? 
                     (data[3 /* C4 */] < 1.5470097f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.101953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5472656f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
        0.97619045f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_44_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_44_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_44_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[0 /* C1 */] < 6.201953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.7541647f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                     (data[3 /* C4 */] < 1.703125f ? 
                         (data[2 /* C3 */] < 5.0484376f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    1.0f)) : 
             (data[2 /* C3 */] < 5.1016684f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.80625f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.1492186f ? 
                 (data[3 /* C4 */] < 1.5507812f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* C3 */] < 4.85332f ? 
                0.5f : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_45_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_45_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_45_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.6487312f ? 
             (data[1 /* C2 */] < 2.6515625f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.2507813f ? 
                    1.0f : 
                     (data[3 /* C4 */] < 1.4493774f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0507812f ? 
                0.0f : 
                 (data[1 /* C2 */] < 2.7007813f ? 
                     (data[1 /* C2 */] < 2.5501952f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            1.0f) : 
        0.97619045f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_46_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_46_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_46_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.251172f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0506077f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.70625f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9507813f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.05625f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9507813f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3533993f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9179688f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[1 /* C2 */] < 2.7484374f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
         (data[3 /* C4 */] < 1.8503418f ? 
             (data[0 /* C1 */] < 6.1f ? 
                 (data[2 /* C3 */] < 4.9410157f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_47_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_47_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_47_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                 (data[1 /* C2 */] < 2.5515625f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.45f ? 
                        1.0f : 
                         (data[2 /* C3 */] < 4.6960936f ? 
                            0.0f : 
                            1.0f)) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503509f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9507813f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.64375f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.8015625f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
        0.97619045f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_48_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_48_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_48_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.9496355f ? 
            1.0f : 
             (data[3 /* C4 */] < 1.7001953f ? 
                 (data[3 /* C4 */] < 1.5500488f ? 
                    0.0f : 
                     (data[0 /* C1 */] < 6.60625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.0121951215f : 
         (data[3 /* C4 */] < 1.6984375f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.75f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.55f ? 
                     (data[2 /* C3 */] < 4.9523587f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_210236_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_210236_Tree_49_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_210236_Tree_49_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_210236_Tree_49_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_210236_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[0 /* C1 */] < 6.1527343f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.049971f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.746875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.8004026f ? 
                    0.0f : 
                     (data[0 /* C1 */] < 5.948541f ? 
                        1.0f : 
                        0.0f))) : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.033203f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_210236_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (data[1 /* C2 */] < 2.5984375f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.4498017f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.0507812f ? 
                0.0f : 
                 (data[2 /* C3 */] < 5.044704f ? 
                    0.0f : 
                    1.0f)) : 
             (data[0 /* C1 */] < 5.9453125f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.9976563f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


