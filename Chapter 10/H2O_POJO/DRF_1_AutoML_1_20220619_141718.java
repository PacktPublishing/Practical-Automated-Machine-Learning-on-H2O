/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2022-06-19T15:54:25.432+01:00
  3.36.1.2
  
  Standalone prediction code with sample test data for DRFModel named DRF_1_AutoML_1_20220619_141718

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/DRF_1_AutoML_1_20220619_141718 > DRF_1_AutoML_1_20220619_141718.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DRF_1_AutoML_1_20220619_141718.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DRF_1_AutoML_1_20220619_141718", algorithm="drf")
public class DRF_1_AutoML_1_20220619_141718 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DRF_1_AutoML_1_20220619_141718.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ DRF_1_AutoML_1_20220619_141718_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};

  public DRF_1_AutoML_1_20220619_141718() { super(NAMES,DOMAINS,"C5"); }
  public String getUUID() { return Long.toString(8641488989328838094L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    DRF_1_AutoML_1_20220619_141718_Forest_0.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_1.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_2.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_3.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_4.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_5.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_6.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_7.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_8.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_9.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_10.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_11.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_12.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_13.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_14.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_15.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_16.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_17.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_18.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_19.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_20.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_21.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_22.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_23.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_24.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_25.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_26.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_27.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_28.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_29.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_30.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_31.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_32.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_33.score0(data,preds);
    DRF_1_AutoML_1_20220619_141718_Forest_34.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_DRF_1_AutoML_1_20220619_141718 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_DRF_1_AutoML_1_20220619_141718_0.fill(VALUES);
  }
  static final class NamesHolder_DRF_1_AutoML_1_20220619_141718_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C1";
      sa[1] = "C2";
      sa[2] = "C3";
      sa[3] = "C4";
    }
  }
}
// The class representing column C5
class DRF_1_AutoML_1_20220619_141718_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    DRF_1_AutoML_1_20220619_141718_ColInfo_4_0.fill(VALUES);
  }
  static final class DRF_1_AutoML_1_20220619_141718_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Iris-setosa";
      sa[1] = "Iris-versicolor";
      sa[2] = "Iris-virginica";
    }
  }
}

class DRF_1_AutoML_1_20220619_141718_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_0_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_0_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_0_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (data[1 /* C2 */] < 2.7992187f ? 
            0.0f : 
            1.0f) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.9007812f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.651953f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.987109f ? 
                     (data[0 /* C1 */] < 4.6578126f ? 
                        0.0f : 
                        1.0f) : 
                     (data[0 /* C1 */] < 6.05f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (data[0 /* C1 */] < 5.5515623f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.75f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.6015625f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.7496905f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5484375f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.745117f ? 
                0.0f : 
                 (data[3 /* C4 */] < 1.7039063f ? 
                     (data[0 /* C1 */] < 6.048001f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.049401f ? 
             (data[2 /* C3 */] < 5.0447264f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_1_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_1_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_1_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503509f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.450293f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                0.0f : 
                 (data[2 /* C3 */] < 5.051851f ? 
                     (data[1 /* C2 */] < 2.6015625f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f))) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_2_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_2_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_2_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5491676f ? 
             (data[1 /* C2 */] < 2.253125f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.733594f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0015626f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.6969726f ? 
                         (data[0 /* C1 */] < 6.20437f ? 
                            0.0f : 
                            1.0f) : 
                        1.0f))) : 
             (data[2 /* C3 */] < 5.0447264f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                     (data[3 /* C4 */] < 1.7546875f ? 
                         (data[2 /* C3 */] < 4.75f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5501953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                0.0f : 
                1.0f) : 
             (data[2 /* C3 */] < 4.745117f ? 
                1.0f : 
                 (data[2 /* C3 */] < 5.396178f ? 
                    0.0f : 
                    1.0f))) : 
         (data[3 /* C4 */] < 1.8503418f ? 
             (data[0 /* C1 */] < 5.9453125f ? 
                 (data[2 /* C3 */] < 4.9410157f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_3_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_3_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_3_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.7491994f ? 
                 (data[0 /* C1 */] < 4.946875f ? 
                     (data[1 /* C2 */] < 2.4484375f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 5.959375f ? 
                         (data[1 /* C2 */] < 3.00625f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f))) : 
             (data[3 /* C4 */] < 1.7001724f ? 
                 (data[0 /* C1 */] < 6.0578127f ? 
                     (data[2 /* C3 */] < 5.043826f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
                0.0f : 
                1.0f) : 
             (data[2 /* C3 */] < 5.3497863f ? 
                 (data[3 /* C4 */] < 1.5501953f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.8488283f ? 
            0.6666667f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_4_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_4_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_4_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1527343f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8484373f ? 
                    1.0f : 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.65f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[2 /* C3 */] < 5.049543f ? 
                 (data[0 /* C1 */] < 6.3527346f ? 
                     (data[2 /* C3 */] < 4.7484374f ? 
                        1.0f : 
                         (data[3 /* C4 */] < 1.6375f ? 
                            1.0f : 
                            0.0f)) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.101953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                 (data[1 /* C2 */] < 2.5523438f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6082032f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.5023437f ? 
                     (data[0 /* C1 */] < 6.051019f ? 
                         (data[3 /* C4 */] < 1.5695312f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f) : 
                    0.0f)) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_5_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_5_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_5_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (data[1 /* C2 */] < 2.6515625f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.35f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.95f ? 
                         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5960938f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f)) : 
                1.0f) : 
             (data[2 /* C3 */] < 4.8509765f ? 
                 (data[0 /* C1 */] < 5.9453125f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.3511214f ? 
                 (data[1 /* C2 */] < 2.35625f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[0 /* C1 */] < 5.9453125f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_6_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_6_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_6_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505014f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                    0.0f)) : 
             (data[2 /* C3 */] < 4.9481616f ? 
                 (data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 6.015625f ? 
                         (data[3 /* C4 */] < 1.9f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f)) : 
                 (data[0 /* C1 */] < 6.0578127f ? 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.9487915f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.998633f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.451945f ? 
                0.0f : 
                 (data[0 /* C1 */] < 5.25625f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5501953f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* C3 */] < 4.8488283f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_7_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_7_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_7_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                 (data[0 /* C1 */] < 4.953906f ? 
                    0.0f : 
                    1.0f) : 
                 (data[1 /* C2 */] < 2.65f ? 
                    0.0f : 
                     (data[3 /* C4 */] < 1.5507812f ? 
                        0.0f : 
                         (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9484377f ? 
                            1.0f : 
                            0.0f)))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3503907f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
                 (data[1 /* C2 */] < 2.6039062f ? 
                     (data[0 /* C1 */] < 5.5648437f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (data[3 /* C4 */] < 1.5497773f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.9484377f ? 
                        0.0f : 
                        1.0f)))) : 
        0.9782609f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_8_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_8_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_8_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6487312f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.0492187f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.995703f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.998633f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                1.0f) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_9_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_9_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_9_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.6017578f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.9007812f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
             (data[0 /* C1 */] < 4.946875f ? 
                 (data[1 /* C2 */] < 2.45f ? 
                     (data[1 /* C2 */] < 2.3503907f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[1 /* C2 */] < 2.3515625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[2 /* C3 */] < 3.005078f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.05625f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.054605f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                        1.0f : 
                         (data[0 /* C1 */] < 6.0f ? 
                            1.0f : 
                            0.0f)) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                 (data[1 /* C2 */] < 2.84375f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[1 /* C2 */] < 2.45f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* C3 */] < 5.1023436f ? 
             (data[1 /* C2 */] < 2.75f ? 
                 (data[0 /* C1 */] < 6.25f ? 
                    0.0f : 
                     (data[3 /* C4 */] < 1.65625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_10_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_10_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_10_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7001724f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
        0.048076924f : 
        0.9782609f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_11_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_11_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_11_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 5.1497602f ? 
                 (data[2 /* C3 */] < 4.850551f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.9f ? 
                         (data[2 /* C3 */] < 4.953125f ? 
                            1.0f : 
                             (data[3 /* C4 */] < 1.7475f ? 
                                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5556874f ? 
                                    0.0f : 
                                    1.0f) : 
                                0.0f)) : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.3511214f ? 
                 (data[1 /* C2 */] < 2.35625f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.7535644f ? 
                        0.0f : 
                         (data[3 /* C4 */] < 1.6023438f ? 
                            1.0f : 
                            0.0f))) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_12_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_12_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_12_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (data[1 /* C2 */] < 2.253125f ? 
                 (data[3 /* C4 */] < 1.2515625f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0484376f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.286719f ? 
                        1.0f : 
                        0.0f))) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (data[1 /* C2 */] < 3.101172f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3503907f ? 
            0.0f : 
             (data[1 /* C2 */] < 2.6515625f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.2066407f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[3 /* C4 */] < 1.8503418f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1503906f ? 
                1.0f : 
                 (data[2 /* C3 */] < 5.401953f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_13_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_13_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_13_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 4.8488536f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.5023437f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0875f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                 (data[2 /* C3 */] < 5.051323f ? 
                     (data[3 /* C4 */] < 1.75f ? 
                         (data[1 /* C2 */] < 2.625f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
            0.0f : 
             (data[0 /* C1 */] < 5.249219f ? 
                1.0f : 
                0.0f)) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.4023438f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 4.851953f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0992188f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_14_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_14_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_14_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[0 /* C1 */] < 5.751953f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 4.945292f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.69375f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 5.9546876f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* C1 */] < 6.1463213f ? 
                     (data[3 /* C4 */] < 1.69375f ? 
                         (data[3 /* C4 */] < 1.5514648f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                     (data[3 /* C4 */] < 1.75f ? 
                         (data[2 /* C3 */] < 5.036919f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.010526316f : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[1 /* C2 */] < 2.3515625f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.4984374f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.753125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[0 /* C1 */] < 5.950391f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.850475f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 3.0875f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_15_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_15_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_15_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.0484376f ? 
                     (data[2 /* C3 */] < 5.0521307f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.6984375f ? 
             (data[1 /* C2 */] < 2.6515625f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.4480467f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_16_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_16_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_16_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* C3 */] < 4.95026f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6515625f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_17_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_17_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_17_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.3482423f ? 
            1.0f : 
            0.0f) : 
         (data[3 /* C4 */] < 0.6015625f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
             (data[3 /* C4 */] < 0.6507019f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3515509f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.93125f ? 
                        1.0f : 
                         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.55f ? 
                            0.0f : 
                            1.0f)))) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.9015625f ? 
            0.0f : 
             (data[2 /* C3 */] < 5.052344f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 3.1f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6992188f ? 
                 (data[0 /* C1 */] < 6.0492187f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0464845f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_18_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_18_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_18_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.1497602f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.4976563f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0484376f ? 
                        0.0f : 
                        0.33333334f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.010526316f : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.500781f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.049609f ? 
                    1.0f : 
                    0.6666667f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_19_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_19_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_19_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6984375f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.15625f ? 
                     (data[1 /* C2 */] < 2.45f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[2 /* C3 */] < 4.8497286f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0992188f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.010526316f : 
         (data[2 /* C3 */] < 4.95026f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.053125f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* C1 */] < 6.1f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.95f ? 
                    1.0f : 
                     (data[1 /* C2 */] < 2.45f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_20_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_20_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_20_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9496355f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.450234f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* C1 */] < 5.959375f ? 
                         (data[2 /* C3 */] < 4.65f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.0511718f ? 
                 (data[3 /* C4 */] < 1.75f ? 
                     (data[1 /* C2 */] < 2.65f ? 
                        0.0f : 
                         (data[1 /* C2 */] < 2.7484376f ? 
                            1.0f : 
                             (data[1 /* C2 */] < 2.899375f ? 
                                0.0f : 
                                1.0f))) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
            0.0f : 
             (data[0 /* C1 */] < 5.150781f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* C3 */] < 4.95026f ? 
             (data[3 /* C4 */] < 1.6515625f ? 
                0.0f : 
                 (data[0 /* C1 */] < 5.9453125f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.75f ? 
                 (data[1 /* C2 */] < 2.65f ? 
                    1.0f : 
                     (data[2 /* C3 */] < 5.0515623f ? 
                        0.0f : 
                         (data[1 /* C2 */] < 2.7484376f ? 
                            0.0f : 
                            1.0f))) : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_21_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_21_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_21_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (data[1 /* C2 */] < 2.7992187f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* C3 */] < 2.699707f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9410157f ? 
                 (data[3 /* C4 */] < 0.6046875f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* C1 */] < 6.0578127f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 3.0511718f ? 
            0.0f : 
             (data[2 /* C3 */] < 5.0466247f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 6.010156f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.344336f ? 
                0.0f : 
                1.0f) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (data[0 /* C1 */] < 5.4015627f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* C3 */] < 5.0504885f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_22_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_22_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_22_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.8488283f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1023438f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.7499542f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.9f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5503709f ? 
                         (data[2 /* C3 */] < 5.025f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.0504885f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
                0.0f : 
                 (data[1 /* C2 */] < 2.7492187f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5501953f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* C1 */] < 5.948828f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.096875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_23_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_23_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_23_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.4501419f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.409375f ? 
                     (data[2 /* C3 */] < 4.745477f ? 
                        1.0f : 
                         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.55f ? 
                            0.0f : 
                            1.0f)) : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* C4 */] < 1.6984375f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.55f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.55f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_24_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_24_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_24_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (data[3 /* C4 */] < 1.7001724f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.344336f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* C3 */] < 4.8488283f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.096875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.101953f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.344336f ? 
                0.0f : 
                1.0f) : 
            1.0f) : 
         (data[2 /* C3 */] < 4.8488283f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.096875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_25_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_25_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_25_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6500976f ? 
                0.0f : 
                1.0f) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_26_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_26_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_26_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (data[1 /* C2 */] < 2.7992187f ? 
            0.0f : 
            1.0f) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.9007812f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.449011f ? 
                0.0f : 
                 (data[1 /* C2 */] < 3.550469f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (data[0 /* C1 */] < 4.6515627f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.4454224f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 6.2498903f ? 
                        1.0f : 
                         (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.05625f ? 
                            1.0f : 
                            0.0f)))) : 
            0.0f) : 
         (data[0 /* C1 */] < 5.548047f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[2 /* C3 */] < 2.7976563f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* C1 */] < 5.952289f ? 
                     (data[2 /* C3 */] < 4.963281f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.096875f ? 
                1.0f : 
                0.0f)) : 
         (data[1 /* C2 */] < 2.4007812f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[1 /* C2 */] < 2.8503907f ? 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.010156f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_27_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_27_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_27_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9496355f ? 
             (data[0 /* C1 */] < 5.005469f ? 
                 (data[1 /* C2 */] < 2.45f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.69375f ? 
                    1.0f : 
                    0.5f)) : 
             (data[2 /* C3 */] < 5.048777f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.3414063f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.4505153f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* C3 */] < 4.95026f ? 
             (data[0 /* C1 */] < 6.499219f ? 
                 (data[0 /* C1 */] < 6.0521455f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (data[3 /* C4 */] < 1.75f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6503906f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_28_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_28_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_28_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.749821f ? 
            1.0f : 
             (data[2 /* C3 */] < 5.1487803f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.5078125f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.8554688f ? 
                         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                             (data[1 /* C2 */] < 2.7625f ? 
                                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1446877f ? 
                                     (data[3 /* C4 */] < 1.5525f ? 
                                        0.0f : 
                                        1.0f) : 
                                    0.0f) : 
                                0.0f) : 
                            1.0f) : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.010526316f : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.500781f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.853125f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                         (data[1 /* C2 */] < 2.7484374f ? 
                             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1404686f ? 
                                 (data[3 /* C4 */] < 1.5525f ? 
                                    1.0f : 
                                    0.0f) : 
                                1.0f) : 
                            1.0f) : 
                        0.0f) : 
                    1.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_29_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_29_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_29_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 0.80078125f ? 
            1.0f : 
            0.0f) : 
         (data[3 /* C4 */] < 0.6015625f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3503907f ? 
                1.0f : 
                 (data[1 /* C2 */] < 2.551953f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 5.64375f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.0f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.7492187f ? 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5500549f ? 
                    1.0f : 
                     (data[0 /* C1 */] < 6.9625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6f ? 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.3480469f ? 
                0.0f : 
                 (data[1 /* C2 */] < 2.653125f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
         (data[3 /* C4 */] < 1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.1006417f ? 
                 (data[1 /* C2 */] < 2.84375f ? 
                     (data[0 /* C1 */] < 6.25629f ? 
                        0.0f : 
                         (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.6425781f ? 
                            0.0f : 
                            1.0f)) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_30_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_30_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_30_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.945292f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.5503144f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.151172f ? 
                0.0f : 
                 (data[2 /* C3 */] < 5.0408554f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.6492188f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* C3 */] < 5.1496415f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.05f ? 
                 (data[3 /* C4 */] < 1.7003906f ? 
                     (data[2 /* C3 */] < 5.0484376f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.999405f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_31_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_31_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_31_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.3482423f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.9007812f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (data[2 /* C3 */] < 2.1559796f ? 
                0.0f : 
                 (data[0 /* C1 */] < 4.9492188f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.349206f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* C1 */] < 5.3019533f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.6f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* C1 */] < 6.002208f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.8488283f ? 
             (data[1 /* C2 */] < 2.553125f ? 
                 (data[0 /* C1 */] < 4.946875f ? 
                     (data[1 /* C2 */] < 2.3984375f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[3 /* C4 */] < 1.5002563f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[1 /* C2 */] < 2.4007812f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.6984375f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_32_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_32_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_32_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* C4 */] < 0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.7499542f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.0503907f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.050795f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.05625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* C1 */] < 7.0492187f ? 
             (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.050587f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 5.033203f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_33_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_33_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_33_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* C1 */] < 5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 2.4519532f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* C3 */] < 2.5499024f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* C2 */] < 2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (data[0 /* C1 */] < 4.946875f ? 
                 (data[3 /* C4 */] < 0.653125f ? 
                    0.0f : 
                     (data[1 /* C2 */] < 2.4484375f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
             (data[3 /* C4 */] < 1.6984375f ? 
                 (data[0 /* C1 */] < 6.0578127f ? 
                    1.0f : 
                     (data[2 /* C3 */] < 4.95625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* C3 */] < 3.005078f ? 
            0.0f : 
             (data[3 /* C4 */] < 1.75f ? 
                1.0f : 
                 (data[2 /* C3 */] < 4.9514937f ? 
                     (data[0 /* C1 */] < 5.9507813f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
             (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.445725f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.646875f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.853125f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.0497513f ? 
                     (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1f ? 
                         (data[3 /* C4 */] < 1.7044433f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    1.0f) : 
                1.0f)) : 
         (data[3 /* C4 */] < 1.75f ? 
             (data[0 /* C1 */] < 6.349108f ? 
                 (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.9f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class DRF_1_AutoML_1_20220619_141718_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_1_AutoML_1_20220619_141718_Tree_34_class_0.score0(fdata);
    preds[2] += DRF_1_AutoML_1_20220619_141718_Tree_34_class_1.score0(fdata);
    preds[3] += DRF_1_AutoML_1_20220619_141718_Tree_34_class_2.score0(fdata);
  }
}
class DRF_1_AutoML_1_20220619_141718_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C3 */] < 2.4519532f ? 
        0.0f : 
         (data[2 /* C3 */] < 4.9496355f ? 
             (Double.isNaN(data[1]) || data[1 /* C2 */] < 2.9492188f ? 
                1.0f : 
                 (data[0 /* C1 */] < 6.204297f ? 
                     (Double.isNaN(data[3]) || data[3 /* C4 */] < 1.65625f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (data[2 /* C3 */] < 5.048777f ? 
                 (data[3 /* C4 */] < 1.80625f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_1_AutoML_1_20220619_141718_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* C3 */] < 4.750879f ? 
        0.010526316f : 
         (Double.isNaN(data[1]) || data[1 /* C2 */] < 3.1484375f ? 
             (data[2 /* C3 */] < 5.0489016f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] < 6.5046873f ? 
                     (data[3 /* C4 */] < 1.65625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


